<?php
// $Id$

/**
 * @file
 *   Shortens URLs via external services.
 */

/**
 * @todo
 * - AHAHify the block form
 */

/**
 * Implementation of hook_help().
 */
function shorten_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#shorten":
      $output = '<p>'. t("This module shortens URLs.") .'</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function shorten_menu() {
  $items = array();
  $items['admin/settings/shorten'] = array(
    'title' => 'Shorten',
    'description' => 'Adjust certain display settings for Shorten.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('shorten_admin'),
    'access arguments' => array('access administration pages'),
    'file' => 'shorten.admin.inc',
  );
  $items['admin/settings/shorten/general'] = array(
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('access administration pages'),
    'weight' => -1,
  );
  $items['admin/settings/shorten/keys'] = array(
    'title' => 'Shorten API Keys',
    'description' => 'Fill in API keys to use certain services.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('shorten_keys'),
    'access arguments' => array('manage Shorten URLs API keys'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'shorten.admin.inc',
  );
  $items['shorten'] = array(
    'title' => 'Shorten URLs',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('shorten_form_shorten'),
    'access arguments' => array('use Shorten URLs page'),
  );
  return $items;
}

/**
 * Implementation of hook_block().
 */
function shorten_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $block['shorten']['info'] = t('Shorten URLs');
    $block['shorten_short']['info'] = t('Short URL');
    return $block;
  }
  else if ($op == 'view' && $delta == 'shorten') {
    $block['subject'] = t('Shorten URLs');
    $block['content'] = shorten_form_display();
    return $block;
  }
  else if ($op == 'view' && $delta == 'shorten_short') {
    $block['subject'] = t('Short URL');
    $block['content'] = drupal_get_form('shorten_current');
    return $block;
  }
  else if ($op == 'configure' && $delta == 'shorten') {
    if (_shorten_method_default() != 'none') {
      $form['shorten_show_service'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show the list of URL shortening services'),
        '#default_value' => variable_get('shorten_show_service', FALSE),
        '#weight' => -4,
      );
      return $form;
    }
  }
  else if ($op == 'configure' && $delta == 'shorten_short') {
    drupal_set_message(t('This block displays the short URL for the page on which it is shown, which can slow down uncached pages in some instances.'));
  }
  else if ($op == 'save' && $delta == 'shorten') {
    variable_set('shorten_show_service', $edit['shorten_show_service']);
  }
}

/**
 * Implementation of hook_perm().
 */
function shorten_perm() {
  return array('use Shorten URLs page', 'manage Shorten URLs API keys');
}

/**
 * Retrieves and beautifies the abbreviated URL.
 * This is the main API function of this module.
 *
 * @param $original
 *   The URL of the page for which to create the abbreviated URL.  If not passed
 *   uses the current page.
 * @param $service
 *   The service to use to abbreviate the URL.
 *   For services available by default, see shorten_shorten_service().
 * @return
 *   An abbreviated URL.
 */
function shorten_url($original = '', $service = '') {
  if (!$original) {
    $original = url($_GET['q'], array('absolute' => TRUE));
  }
  if (!$service) {
    $service = variable_get('shorten_service', 'is.gd');
  }
  $cached = cache_get($original);
  if ($cached->data) {
    return $cached->data;
  }
  $url = _shorten_get_url($original, $service);
  //If the primary service fails, try the secondary service.
  if (!$url) {
    $url = _shorten_get_url($original, variable_get('shorten_service_backup', 'TinyURL'));
    //If the secondary service fails, use the original URL.
    if (!$url) {
      $url = $original;
    }
  }
  //Replace "http://" with "www." if the URL is abbreviated because it's shorter.
  if ($url != $original && variable_get('shorten_www', TRUE)) {
    $url = drupal_substr($url, 7);
    $url = 'www.'. $url;
  }
  $expire = time() + (60 * 60 * 24 * 7 * 3);
  cache_set($original, $url, 'cache', $expire);
  module_invoke_all('shorten_create', $original, $url, $service);
  return $url;
}

/**
 * Shortens URLs. Times out after three (3) seconds.
 *
 * @param $original
 *   The URL of the page for which to retrieve the abbreviated URL.
 * @param $service
 *   The service to use to abbreviate the URL.
 *   For services available by default, see shorten_shorten_service().
 * @return
 *   An abbreviated URL.
 */
function _shorten_get_url($original, $service) {
  $method = drupal_strtoupper(variable_get('shorten_method', _shorten_method_default()));
  $services = module_invoke_all('shorten_service', $original);
  foreach ($services as $name => $api) {
    if ($service == $name) {
      if (is_string($api)) {
        $url = shorten_fetch($api . $original);
        break;
      }
      else if (is_array($api) && $api['custom'] === 'xml') {
        $url = shorten_fetch($api['url'] . $original, $api['tag']);
        break;
      }
      else if (is_array($api) && $api['custom'] === FALSE) {
        $url = shorten_fetch($api['url'] . $original);
        break;
      }
      else if (is_array($api) && $api['custom'] === TRUE) {
        $url = $api['url'];
        $method = t('A custom method');
        break;
      }
    }
  }
  //If the service isn't found, use the original.
  if (!$url) {
    return $original;
  }

  if ($url && drupal_substr($url, 0, 7) == 'http://') {
    return $url;
  }
  watchdog('shorten', '%method failed to return an abbreviated URL from %service.', array('%method' => $method, '%service' => $service), WATCHDOG_NOTICE, $url);
  return FALSE;
}

/**
 * Implementation of hook_shorten_service().
 */
function shorten_shorten_service($original) {
  $services = array();
  if (variable_get('shorten_adjix', '')) {
    $services['Adjix.com'] = 'http://api.adjix.com/shrinkLink?ultraShort=y&partnerID='. variable_get('shorten_adjix', '') .'&url=';
  }
  if (variable_get('shorten_bitly_login', '') && variable_get('shorten_bitly_key', '')) {
    $services['bit.ly'] = array(
      'custom' => 'xml',
      'url' => 'http://api.bit.ly/shorten?version=2.0.1&format=xml&login='. variable_get('shorten_bitly_login', '') .'&apiKey='. variable_get('shorten_bitly_key', '') .'&longUrl=',
      'tag' => 'shortUrl',
    );
  }
  $services += array(
    'cli.gs' => 'http://cli.gs/api/v1/cligs/create?appid=drupal&url=',
    'hex.io' => 'http://hex.io/api-create.php?url=',
    'idek.net' => 'http://idek.net/c.php?idek-api=true&idek-ref=drupal&idek-url=',
    'is.gd' => 'http://is.gd/api.php?longurl=',
    'lin.cr' => 'http://lin.cr/?mode=api&full=1&l=',
    'Metamark' => 'http://metamark.net/api/rest/simple?long_url=',
    'PeekURL' => 'http://peekurl.com/api.php?desturl=',
    'PiURL' => 'http://piurl.com/api.php?url=',
    'qr.cx' => 'http://qr.cx/api/?longurl=',
    'ri.ms' => 'http://ri.ms/api-create.php?url=',
    'short.ie' => 'http://short.ie/api?format=plain&url=',
    'th8.us' => 'http://th8.us/api.php?url=',
    'TinyURL' => 'http://tinyurl.com/api-create.php?url=',
    'tr.im' => 'http://api.tr.im/api/trim_simple?url=',
    'urlb.at' => 'http://urlb.at/api/rest/?url=',
    'urlCover' => 'http://urlcover.com/api.php?link=',
    'urlShort' => 'http://u.mavrev.com/api.php?url=',
  );
  if (module_exists('shorturl')) {
    $url = url(shorturl_shorten($original), array('absolute' => TRUE));
    $services['This site'] = array(
      'custom' => TRUE,
      'url' => $url,
    );
  }
  if (variable_get('shorten_cligs', '')) {
    $services['cli.gs'] = 'http://cli.gs/api/v1/cligs/create?appid=drupal&key='. variable_get('shorten_cligs', '') .'&url=';
  }
  return $services;
  //tweetburner.com and snurl.com use POST requests.
}

/**
 * Downloads the response of the URL abbreviation service.
 *
 * @param $url
 *   The URL which will return an abbreviated URL from any service. Includes
 *   both the service and the URL to be shortened.
 * @param $tag
 *   If the response is XML, the tag within which to look for the shortened URL.
 * @return
 *   An abbreviated URL or the original one if fetching methods are unavailable.
 */
function shorten_fetch($url, $tag = '') {
  //drupal_http_request() does not offer a reliable way to time out.
  if (variable_get('shorten_method', _shorten_method_default()) == 'php') {
    $context = stream_context_create(array('http' => array('timeout' => 3))); 
    $contents = file_get_contents($url, 0, $context);
  }
  else if (variable_get('shorten_method', _shorten_method_default()) == 'curl') {
    $c = curl_init();
    curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($c, CURLOPT_CONNECTTIMEOUT, 3);
    curl_setopt($c, CURLOPT_URL, $url);
    $contents = curl_exec($c);
    curl_close($c);
  }
  else {
    $contents = $url;
  }
  if ($tag) {
    $contents = _shorten_xml($contents, $tag);
  }
  return $contents;
}

/**
 * Parses the value between tags in an XML document.
 *
 * @param $xml
 *   The contents of the XML document.
 * @param $tag
 *   The tag to get the value from.
 * @return
 *   The value from the specified tag, typically an abbreviated URL.
 */
function _shorten_xml($xml, $tag) {
  $start = strpos($xml, $tag) + drupal_strlen($tag) + 1;
  $end = strpos($xml, $tag, $start + 1) - 2;
  $length = -(drupal_strlen($xml) - $end);
  return drupal_substr($xml, $start, $length);
}

/**
 * Displays the Shorten form.
 */
function shorten_form_display() {
  return drupal_get_form('shorten_form_shorten');
}

/**
 * Builds a form which allows shortening of a URL via the UI.
 */
function shorten_form_shorten() {
  if ($_SESSION['shorten']) {
    drupal_add_js(drupal_get_path('module', 'shorten') .'/shorten.js');
    $form['shortened_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Shortened URL'),
      '#default_value' => check_plain($_SESSION['shorten']),
      '#size' => 25,
    );
    unset($_SESSION['shorten']);
  }
  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#default_value' => '',
    '#required' => TRUE,
    '#size' => 25,
    '#maxlength' => 2048,
  );
  $service = _shorten_service_form();
  if (is_array($service)) {
    $form['service'] = $service;
  }
  $form['shorten'] = array(
    '#type' => 'submit',
    '#value' => t('Shorten'),
  );
  return $form;
}

/**
 * Validate function for the Shorten form.
 */
function shorten_form_shorten_validate($form, &$form_state) {
  $url = $form_state['values']['url'];
  if (drupal_substr($url, 0, 7) != 'http://' && drupal_substr($url, 0, 8) != 'https://' && strpos($url, '.', 9)) {
    form_set_error('url', t('Please enter a valid URL.'));
  }
}

/**
 * Submit function for the Shorten form.
 */
function shorten_form_shorten_submit($form, &$form_state) {
  $service = '';
  if ($form_state['values']['service']) {
    $service = $form_state['values']['service'];
  }
  $shortened = shorten_url($form_state['values']['url'], $service);
  $_SESSION['shorten'] = $shortened;
  if ($form_state['values']['service']) {
    $_SESSION['shorten_service'] = $form_state['values']['service'];
  }
  drupal_set_message(t('%original was shortened to %shortened', array('%original' => $form_state['values']['url'], '%shortened' => $shortened)));
}

/**
 * Form which displays a list of URL shortening services.
 */
function _shorten_service_form() {
  if (variable_get('shorten_show_service', FALSE) && _shorten_method_default() != 'none') {
    $all_services = module_invoke_all('shorten_service', $original);
    $services = array();
    foreach ($all_services as $key => $value) {
      $services[$key] = $key;
    }
    $default = variable_get('shorten_service', 'is.gd');
    if ($default == 'none') {
      $default = 'TinyURL';
    }
    //Remember the last service that was used.
    if ($_SESSION['shorten_service']) {
      $default = $_SESSION['shorten_service'];
    }
    return array(
      '#type' => 'select',
      '#title' => t('Service'),
      '#description' => t('The service to use to shorten the URL.'),
      '#default_value' => $default,
      '#options' => $services,
    );
  }
}

/**
 * Builds a textfield to show the short URL for the current page.
 */
function shorten_current(&$form_state) {
  $form['shorten'] = array(
    '#type' => 'textfield',
    '#size' => 25,
    '#default_value' => shorten_url(url($_GET['q'], array('absolute' => TRUE))),
  );
  return $form;
}

/**
 * Determines the default method for retrieving shortened URLs.
 * cURL is the preferred method, but sometimes it's not installed.
 */
function _shorten_method_default() {
  if (function_exists('curl_exec')) {
    return 'curl';
  }
  else if (function_exists('file_get_contents')) {
    return 'php';
  }
  return 'none';
}